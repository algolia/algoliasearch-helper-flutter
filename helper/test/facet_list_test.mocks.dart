// Mocks generated by Mockito 5.4.2 from annotations
// in algolia_helper_flutter/test/facet_list_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:algolia_helper_flutter/src/facet_list.dart' as _i2;
import 'package:algolia_helper_flutter/src/model/facet.dart' as _i6;
import 'package:algolia_helper_flutter/src/selectable_item.dart' as _i5;
import 'package:algolia_insights/algolia_insights.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSelectionState_0 extends _i1.SmartFake
    implements _i2.SelectionState {
  _FakeSelectionState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEventTracker_1 extends _i1.SmartFake implements _i3.EventTracker {
  _FakeEventTracker_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEventDataDelegate_2 extends _i1.SmartFake
    implements _i3.EventDataDelegate {
  _FakeEventDataDelegate_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FacetList].
///
/// See the documentation for Mockito's code generation for more information.
class MockFacetList extends _i1.Mock implements _i2.FacetList {
  MockFacetList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SelectionState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSelectionState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.SelectionState);
  @override
  _i4.Stream<List<_i5.SelectableItem<_i6.Facet>>> get facets =>
      (super.noSuchMethod(
        Invocation.getter(#facets),
        returnValue: _i4.Stream<List<_i5.SelectableItem<_i6.Facet>>>.empty(),
      ) as _i4.Stream<List<_i5.SelectableItem<_i6.Facet>>>);
  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);
  @override
  void toggle(String? value) => super.noSuchMethod(
        Invocation.method(
          #toggle,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FilterEventTracker].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilterEventTracker extends _i1.Mock
    implements _i3.FilterEventTracker {
  MockFilterEventTracker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.EventTracker get tracker => (super.noSuchMethod(
        Invocation.getter(#tracker),
        returnValue: _FakeEventTracker_1(
          this,
          Invocation.getter(#tracker),
        ),
      ) as _i3.EventTracker);
  @override
  set tracker(_i3.EventTracker? _tracker) => super.noSuchMethod(
        Invocation.setter(
          #tracker,
          _tracker,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.EventDataDelegate get delegate => (super.noSuchMethod(
        Invocation.getter(#delegate),
        returnValue: _FakeEventDataDelegate_2(
          this,
          Invocation.getter(#delegate),
        ),
      ) as _i3.EventDataDelegate);
  @override
  set delegate(_i3.EventDataDelegate? _delegate) => super.noSuchMethod(
        Invocation.setter(
          #delegate,
          _delegate,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get attribute => (super.noSuchMethod(
        Invocation.getter(#attribute),
        returnValue: '',
      ) as String);
  @override
  set attribute(String? _attribute) => super.noSuchMethod(
        Invocation.setter(
          #attribute,
          _attribute,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isEnabled => (super.noSuchMethod(
        Invocation.getter(#isEnabled),
        returnValue: false,
      ) as bool);
  @override
  set isEnabled(bool? _isEnabled) => super.noSuchMethod(
        Invocation.setter(
          #isEnabled,
          _isEnabled,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clickedFilters({
    required String? eventName,
    required List<String>? values,
    DateTime? timestamp,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #clickedFilters,
          [],
          {
            #eventName: eventName,
            #values: values,
            #timestamp: timestamp,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void convertedFilters({
    required String? eventName,
    required List<String>? values,
    DateTime? timestamp,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #convertedFilters,
          [],
          {
            #eventName: eventName,
            #values: values,
            #timestamp: timestamp,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void viewedFilters({
    required String? eventName,
    required List<String>? values,
    DateTime? timestamp,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #viewedFilters,
          [],
          {
            #eventName: eventName,
            #values: values,
            #timestamp: timestamp,
          },
        ),
        returnValueForMissingStub: null,
      );
}
