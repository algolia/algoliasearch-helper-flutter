// Mocks generated by Mockito 5.3.0 from annotations
// in algolia_helper/test/facet_list_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:algolia_helper/src/facet_list.dart' as _i3;
import 'package:algolia_helper/src/search_response.dart' as _i6;
import 'package:algolia_helper/src/selectable_item.dart' as _i5;
import 'package:algolia_insights/algolia_insights.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFilterEventTracker_0 extends _i1.SmartFake
    implements _i2.FilterEventTracker {
  _FakeFilterEventTracker_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [FacetList].
///
/// See the documentation for Mockito's code generation for more information.
class MockFacetList extends _i1.Mock implements _i3.FacetList {
  MockFacetList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FilterEventTracker get eventTracker => (super.noSuchMethod(
          Invocation.getter(#eventTracker),
          returnValue:
              _FakeFilterEventTracker_0(this, Invocation.getter(#eventTracker)))
      as _i2.FilterEventTracker);
  @override
  String get attribute =>
      (super.noSuchMethod(Invocation.getter(#attribute), returnValue: '')
          as String);
  @override
  _i4.Stream<List<_i5.SelectableItem<_i6.Facet>>> get facets =>
      (super.noSuchMethod(Invocation.getter(#facets),
              returnValue:
                  _i4.Stream<List<_i5.SelectableItem<_i6.Facet>>>.empty())
          as _i4.Stream<List<_i5.SelectableItem<_i6.Facet>>>);
  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  void toggle(String? value) =>
      super.noSuchMethod(Invocation.method(#toggle, [value]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [FilterEventTracker].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilterEventTracker extends _i1.Mock
    implements _i2.FilterEventTracker {
  MockFilterEventTracker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isEnabled =>
      (super.noSuchMethod(Invocation.getter(#isEnabled), returnValue: false)
          as bool);
  @override
  void clickedFilters(
          {String? eventName, String? attribute, List<String>? values}) =>
      super.noSuchMethod(
          Invocation.method(#clickedFilters, [],
              {#eventName: eventName, #attribute: attribute, #values: values}),
          returnValueForMissingStub: null);
  @override
  void viewedFilters(
          {String? eventName, String? attribute, List<String>? values}) =>
      super.noSuchMethod(
          Invocation.method(#viewedFilters, [],
              {#eventName: eventName, #attribute: attribute, #values: values}),
          returnValueForMissingStub: null);
  @override
  void convertedFilters(
          {String? eventName, String? attribute, List<String>? values}) =>
      super.noSuchMethod(
          Invocation.method(#convertedFilters, [],
              {#eventName: eventName, #attribute: attribute, #values: values}),
          returnValueForMissingStub: null);
}
